server:
  port: ${port:8080}
# 시크릿 지정하기
spring:
  profiles.active: local
  # todo : 데이터 소스 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://root:TXZVo1ibfZGqoN0cAlHF@containers-us-west-49.railway.app:6599/railway?serverTimezone=Asia/Seoul
    username: root
    password: TXZVo1ibfZGqoN0cAlHF
    hikari:
      pool-name: jpa-hikari-pool
      # todo : connection pool 을 이용해 DB 속도 빠르게 하기. 10->50으로 바꿀 예정
      maximum-pool-size: 10
      connection-timeout: 5000
      connection-init-sql: SELECT 1
      validation-timeout: 2000
      minimum-idle: 10
      idle-timeout: 600000
      max-lifetime: 1800000
      driver-class-name: ${spring.datasource.driver-class-name}
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
  #      data-source-properties:
  #        rewriteBatchedStatements: true
  # JPA 설정
  jpa:
    open-in-view: true # todo : dev일 때 true로
    generate-ddl: true # true로 설정 시, Entity 어노테이션(@Entity)이 명시된 클래스를 찾아서 ddl을 생성하고 실행
    show-sql: true # 콘솔에서 sql 보기 # todo : dev일 때 true로
    hibernate:
      ddl-auto: update # todo : dev일 때 update, create-drop
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
        default_batch_fetch_size: ${chunkSize:100}
        jdbc.batch_size: 20
        format_sql: true # 콘솔에서 sql 보기 # todo : dev일 때 true로
  # data.sql로 DB에 내용 자동 삽입
  #  defer-datasource-initialization: true
  #  sql:
  #    init:
  #      mode: always
  #      schema-locations: classpath:schema.sql
  #      data-locations: classpath:data.sql

  # Security OAuth
  security:
    oauth2.client:
      registration:
        google:
          clientId: '468310449780-mp1v8li5o22vr6k76l3kppp7buu9iqg7.apps.googleusercontent.com'
          clientSecret: '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'
          scope:
            - email
            - profile
        kakao:
          clientId: 'a1698cd60aafa124b03e4117dd52549f'
          clientSecret: 'x2TJDMqr8vS7e20h5Tokr9iH3uWuYx7e'
          clientAuthenticationMethod: client_secret_post
          authorizationGrantType: authorization_code
#          redirectUri: "http://localhost:3000/login/oauth2/callback/kakao"
          redirectUri: "https://gmmclients.click/login/oauth2/callback/kakao"
          scope:
            - profile_nickname
          clientName: Kakao

      # Provider 설정
      provider:
        kakao:
          authorizationUri: https://kauth.kakao.com/oauth/authorize
          tokenUri: https://kauth.kakao.com/oauth/token
          userInfoUri: https://kapi.kakao.com/v2/user/me
          userNameAttribute: id

# cors 설정
cors:
  allowed-origins: "http://localhost:3000/"
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: "*"
  max-age: 3600

# Log
logging:
  file:
    name: ${user.dir}/logs/ # 로깅 파일 위치이다.
  level: # 각 package 별로 로깅 레벨을 지정할 수 있다.
    com/hsstudy/GuessMyMBTI: debug
  #    com.project.study.controller : debug
  logback:
    rollingpolicy:
      max-history: 7
      max-file-size: 10MB

# jwt secret key 설정
jwt:
  # 터미널에 openssl rand -hex 64 입력하면 생성해줌
  # base64로 인코딩된 암호 키, HS512를 사용할 것이기 때문에, 512비트(64바이트) 이상이 되어야 함
  secretKey: dc7666c597d4536c8cfdb1b5f0010b928aba44f9f0624015276763b15db4956862e2dae61b3b489450b689070c3d7a3beb305a1912f6556e657cc2750bad6992
  access:
    expiration: 3600000 # 1시간(60분) (1000L(ms -> s) * 60L(s -> m) * 60L(m -> h))
    header: Authorization
  refresh:
    expiration: 1209600000 #  (1000L(ms -> s) * 60L(s -> m) * 60L(m -> h) * 24L(h -> 하루) * 14(2주))
    header: Authorization-refresh
