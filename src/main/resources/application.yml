server:
  port: ${port:8080}

spring:
  profiles.active: local
  # 데이터 소스 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/oauth_login_tutorial?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
    url: jdbc:mysql://root:oA1bI1m5YtXOs7OKr8SD@containers-us-west-181.railway.app:7602/railway?serverTimezone=Asia/Seoul
    username: root
    password: oA1bI1m5YtXOs7OKr8SD
    hikari:
      pool-name: jpa-hikari-pool
      maximum-pool-size: 10
      connection-timeout: 5000
      connection-init-sql: SELECT 1
      validation-timeout: 2000
      minimum-idle: 10
      idle-timeout: 600000
      max-lifetime: 1800000
      driver-class-name: ${spring.datasource.driver-class-name}
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      data-source-properties:
        rewriteBatchedStatements: true
  # JPA 설정
  jpa:
    generate-ddl: true
    show-sql: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
        default_batch_fetch_size: ${chunkSize:100}
        jdbc.batch_size: 20
        format_sql: true
  # Security OAuth
  security:
    oauth2.client:
      registration:
        google:
          clientId: '468310449780-mp1v8li5o22vr6k76l3kppp7buu9iqg7.apps.googleusercontent.com'
          clientSecret: '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'
          scope:
            - email
            - profile
        kakao:
          clientId: 'a1698cd60aafa124b03e4117dd52549f'
          clientSecret: 'x2TJDMqr8vS7e20h5Tokr9iH3uWuYx7e'
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirectUri: "http://localhost:8080/login/oauth2/callback/kakao"
#          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
          scope:
            - profile_nickname
          #            - profile_image
            - account_email
          clientName: Kakao
#        facebook:
#          clientId: '{페이스북 client-id}'
#          clientSecret: '{페이스북 client-secret}'
#          scope:
#            - email
#            - public_profile
#        naver:
#          clientId: '{네이버 client-id}'
#          clientSecret: '{네이버 client-secret}'
#          clientAuthenticationMethod: post
#          authorizationGrantType: authorization_code
#          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
#          scope:
#            - nickname
#            - email
#            - profile_image
#          clientName: Naver

      # Provider 설정
      provider:
        kakao:
          authorizationUri: https://kauth.kakao.com/oauth/authorize
          tokenUri: https://kauth.kakao.com/oauth/token
          userInfoUri: https://kapi.kakao.com/v2/user/me
          userNameAttribute: id
#        naver:
#          authorizationUri: https://nid.naver.com/oauth2.0/authorize
#          tokenUri: https://nid.naver.com/oauth2.0/token
#          userInfoUri: https://openapi.naver.com/v1/nid/me
#          userNameAttribute: response


# cors 설정
cors:
  allowed-origins: 'http://localhost:3000'
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: '*'
  max-age: 3600

# jwt secret key 설정
jwt.secret: '8sknjlO3NPTBqo319DHLNqsQAfRJEdKsETOds'

# 토큰 관련 secret Key 및 RedirectUri 설정
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpiry: 1800000
    refreshTokenExpiry: 604800000
  oauth2:
    authorizedRedirectUris:
      - http://localhost:3000/oauth/redirect
